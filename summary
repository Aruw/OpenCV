#Import OpenCV to the project
import cv2

# ----------------------------------  Metodos principais
#Carrega a image
cv2.imshow("dir/file.jpg")

#Exibe a imagem
cv2.imshow("Titulo da janela", imagem)

#Sava a imagem
cv2.imwrite("dir/file.jpg", imagem)

#Aguarda X-milisegundos quando uma tecla é pressionada
cv2.waitKey(miliseconds)

#Fecha todas as janelas
cv2.destroyAllWindows()

#Retorna as dimensões da imagem
height, width, channels = image.shape

# ----------------------------------  Conversão de Espaços de Cor
#BRG para Cinza (gray)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

#BGR para HSV
hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

#BGR para LAB
lab = cv2.cvtColor(image, cv2.COLOR_BGR2LAB)

# ----------------------------------  Desenhar Formas
#Adicionar Texto (putText)
cv2.putText(image, "Texto da imagem", (15,15), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 2, cv2.LINE_AA)
              #img, text, org, fontFace, fontScale, color, thickness, lineType, bottomLeftOrigin

#Desenhar Linha (line)
cv2.line(image, (0, 0), (300, 300), (0, 255, 0), 3)

#Desenha Retangulo (rectangle)
cv2.rectangle(image, (15, 15), (300, 300), (0, 255, 0), 3)

#Desenha Circulo (circle)
cv2.circle(image, (150, 150), 150, (0,0,255), -1)

#Desenhar Elipse (ellipse)
cv2.ellipse(image, (256,256), (100,50), 0, 0, 180, 255, -1)

#Desenhar Poligono (polylines)
pts = np.array([[10,5],[20,30],[70,20],[50,10]], np.int32)
pts = pts.reshape((-1,1,2))
cv2.polylines(img,[pts],True,(0,255,255))

# ----------------------------------  Transformações Geometricas
#Rotaciona a Imagem (rotate)
M = cv2.getRotationMatrix2D((width//2, height//2), 45, 1.0)
rotated = cv2.warpAffine(image, M, (width, height))

#Translação (shift)
M = np.float32([[1, 0, 25], [0, 1, 50]])  #Define o shift da imagem 25 pixels para a direita e 50 pixels para baixo.
shifted = cv2.warpAffine(image, M, (width, height))

#Redimensionar (resize)
r = 150.0 / image.shape[1]
dim = (150, int(image.shape[0] * r))  #Referente ao o "aspect ratio" da imagem. 
resized = cv2.resize(image, dim, interpolation = cv2.INTER_AREA)

# ----------------------------------  Operações com Arrays
#Inverter (flip)
flipped = cv2.flip(image, 1)

#Adicionar (add)
added = cv2.add(image, filter)

#Subtrair (subtract)
subtracted = cv2.subtract(image, filter)

#BitwiseAnd 
bitwiseAnd = cv2.bitwise_and(rectangle, circle)

#BitwiseOr
bitwiseOr = cv2.bitwise_or(rectangle, circle)

#BitwiseXor
bitwiseXor = cv2.bitwise_xor(rectangle, circle)

#BitwiseNot
bitwiseNot = cv2.bitwise_not(circle)

#Mascara (mask)
masked = cv2.bitwise_and(image, image, mask = mask)

#Separar canais (split)
(B, G, R) = cv2.split(image)

#Juntar os canais (merge)
merged = cv2.merge([B, G, R])

# ----------------------------------  
#Calcula o Histograma
hist = cv2.calcHist([image], [0], None, [256], [0, 256]) 

#Equalização do Histograma
equalized = cv2.equalizeHist(image)

# ----------------------------------  
#Borrar Mediana (medianBlur)
median = cv2.medianBlur(image, 3)

#Filtro Media (Averaging Filter)
blurred = cv2.blur(image, (5, 5))

#Filtro Gaussiano (GaussianBlur)
blurred = cv2.GaussianBlur(image, (kX, kY), 0)

# ----------------------------------  Transformaçõe Morfologicas 
#Erosão (erode)
eroded = cv2.erode(gray, None, iterations = 3)

#Dilatação (dilate)
dilated = cv2.dilate(gray, None, iterations= 1)

#Abrir (opening)
opening = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)

#Fechar (closing)
closing = cv2.morphologyEx(img, cv2.MORPH_CLOSE, kernel)

#Morphological Gradient
gradient = cv2.morphologyEx(img, cv2.MORPH_GRADIENT, kernel)

#Top Hat
tophat = cv2.morphologyEx(img, cv2.MORPH_TOPHAT, kernel)

#Black Hat
blackhat = cv2.morphologyEx(img, cv2.MORPH_BLACKHAT, kernel)

# ----------------------------------  Image Thresholding
#Simple Thresholding
ret,thresh1 = cv.threshold(img,127,255,cv.THRESH_BINARY)
ret,thresh2 = cv.threshold(img,127,255,cv.THRESH_BINARY_INV)
ret,thresh3 = cv.threshold(img,127,255,cv.THRESH_TRUNC)
ret,thresh4 = cv.threshold(img,127,255,cv.THRESH_TOZERO)
ret,thresh5 = cv.threshold(img,127,255,cv.THRESH_TOZERO_INV)

#Threshold Adaptativo (Adaptive Thresholding)
thresh = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY_INV, 11, 4)
thresh = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 15, 3)

# ----------------------------------  Detecção de Borda
#Sobel 
gX = cv2.Sobel(gray, ddepth=cv2.CV_64F, dx=1, dy=0)
gY = cv2.Sobel(gray, ddepth=cv2.CV_64F, dx=0, dy=1)
gX = cv2.convertScaleAbs(gX)
gY = cv2.convertScaleAbs(gY)
sobelCombined = cv2.addWeighted(gX, 0.5, gY, 0.5, 0)

#Canny 
wide = cv2.Canny(blurred, 10, 200)

# ----------------------------------  Contornos
#Encontra todos os contornos na imagem e desenha TODOS os contornos da imagem
(_, cnts, _) = cv2.findContours(canny.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE) #Destrutivo
(_, cnts, _) = cv2.findContours(gray.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) #Destrutivo
cv2.drawContours(image, cnts, -1, (0, 255, 0), 2) #Destrutivo

#Calcula a area de um contorno 
area = cv2.contourArea(cnt)

#Calcula o perimetro de um contorno
perimeter = cv2.arcLength(c, True)

#Moments  (Image moments help you to calculate some features like center of mass)
M = cv2.moments(c)

#
approx = cv2.approxPolyDP(c, 0.01 * peri, True)

#
(x, y, w, h) = cv2.boundingRect(approx)
